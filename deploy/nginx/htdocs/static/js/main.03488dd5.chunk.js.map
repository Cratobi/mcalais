{"version":3,"sources":["component/sideBar/sideBar.js","store/index.js","store/actions.js","container/Account/Account.js","container/Ledger/Ledger.js","container/Journal/Journal.js","container/Catalogue/Catalogue.js","container/Home/Home.js","container/App.js","store/sagas/api/account.js","store/sagas/accountSaga.js","store/sagas/api/journal.js","store/sagas/journalSaga.js","store/sagas/api/ledger.js","store/sagas/ledgerSaga.js","store/sagas/index.js","store/reducers/account.js","store/reducers/journal.js","store/reducers/ledger.js","store/reducers/catagory.js","store/reducers/index.js","store/config.js","serviceWorker.js","index.js"],"names":["sideBar","props","className","style","padding","children","CATAGORY","ACCOUNT","FETCH","SAVE","ADD","CHANGE","LEDGER","JOURNAL","saveCatagory","payload","type","data","fetchAccount","fetchJournal","saveJournal","saveNewJournal","fetchLedger","saveLedger","App","state","name","code","HandleChange","e","target","value","setState","HandleClear","HandlerAddAccount","preventDefault","addAccount","typeSelect","focus","this","catagory","map","index","title","width","account_order","account_id","account","filter","id","balance","preset","preset_id","border","paddingTop","Component","connect","journal","dispatch","Ledger","start_date","Date","toISOString","substr","end_date","HandleDateChange","onDateChange","ledger","length","i","transaction","key","rowSpan","colSpan","textAlign","_id","date","particular","credit","debit","dateFormat","find","fontSize","fmt","format","onChange","Journal","sort","search","day","amount","comment","option","getTime","HandlerAddJournal","addNewJournal","accountSelect","float","onSubmit","ref","select","input","Catalogue","new_catagory","is_visible","action","catagory_tree","change_tree","updateTree","a","async","fetch","response","json","onDragEnd","result","destination","source","draggableId","droppableId","newPresetID","preset_order","splice","newCatagory","newCatagoryList","newSourcePresetID","newDestinationPresetID","newSourcePreset","newDestinationPreset","newAccount","toggleInput","addCatatory","Object","keys","catagoryList","catagory_id","newPreset","HandleInputChange","Capitalize","str","charAt","toUpperCase","slice","typeInput","catagory_index","onClick","provided","innerRef","droppableProps","draggableProps","dragHandleProps","placeholder","sumbitChange","fetchCatagory","match","path","to","activeClassName","component","Account","exact","Home","URL","status","Error","errors","method","headers","body","JSON","stringify","res","handleAccountFetch","handleAddAccount","handleChangeAccount","watchAccount","call","Api","accountData","catagoryData","put","message","takeLatest","handleJournalFetch","handleJournalAdd","watchJournal","startDate","endDate","handleLedgerFetch","watchLedger","rootSaga","all","accountSaga","journalSaga","ledgerSaga","initialState","NEW_SAVE","newState","rootReducer","combineReducers","monitor","window","configureStore","sagaMiddleware","createSagaMiddleware","sagaMonitor","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","run","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03488dd5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst sideBar = props => {\r\n  return (\r\n    <div className='sidebar'>\r\n      <h2 style={{ padding: '2rem 0 0 2rem' }}>\r\n        <b>MCALAIS</b>\r\n      </h2>\r\n      <hr />\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default sideBar\r\n","const CATAGORY = {\r\n  FETCH: 'CATAGORY_FETCH',\r\n  SAVE: 'CATAGORY_SAVE',\r\n}\r\nconst ACCOUNT = {\r\n  FETCH: 'ACCOUNT_FETCH',\r\n  SAVE: 'ACCOUNT_SAVE',\r\n  ADD: 'ACCOUNT_ADD',\r\n  CHANGE: 'ACCOUNT_CHANGE',\r\n}\r\n\r\nconst LEDGER = {\r\n  FETCH: 'LEDGER_FETCH',\r\n  SAVE: 'LEDGER_SAVE',\r\n}\r\n\r\nconst JOURNAL = {\r\n  FETCH: 'JOURNAL_FETCH',\r\n  SAVE: 'JOURNAL_SAVE',\r\n  NEW: 'JOURNAL_NEW',\r\n  NEW_SAVE: 'JOURNAL_NEW_SAVE',\r\n}\r\n\r\nexport { CATAGORY, ACCOUNT, LEDGER, JOURNAL }\r\n","import { LEDGER, JOURNAL, ACCOUNT, CATAGORY } from './index'\r\n\r\n/*\r\n * Chart of Accounts\r\n */\r\nconst fetchCatagory = () => ({\r\n  type: CATAGORY.FETCH,\r\n})\r\nconst saveCatagory = payload => ({\r\n  type: CATAGORY.SAVE,\r\n  data: payload,\r\n})\r\nconst fetchAccount = () => ({\r\n  type: ACCOUNT.FETCH,\r\n})\r\nconst saveAccount = payload => ({\r\n  type: ACCOUNT.SAVE,\r\n  data: payload,\r\n})\r\nconst addAccount = payload => ({\r\n  type: ACCOUNT.ADD,\r\n  data: payload,\r\n})\r\nconst sumbitChange = payload => ({\r\n  type: ACCOUNT.CHANGE,\r\n  data: payload,\r\n})\r\n/*\r\n * Journal\r\n */\r\nconst fetchJournal = payload => ({\r\n  type: JOURNAL.FETCH,\r\n  data: payload,\r\n})\r\nconst saveJournal = payload => ({\r\n  type: JOURNAL.SAVE,\r\n  data: payload,\r\n})\r\nconst addNewJournal = payload => ({\r\n  type: JOURNAL.NEW,\r\n  data: payload,\r\n})\r\nconst saveNewJournal = payload => ({\r\n  type: JOURNAL.NEW_SAVE,\r\n  data: payload,\r\n})\r\n\r\n/*\r\n * Ledger\r\n */\r\nconst fetchLedger = payload => ({\r\n  type: LEDGER.FETCH,\r\n  data: payload,\r\n})\r\nconst saveLedger = payload => ({\r\n  type: LEDGER.SAVE,\r\n  data: payload,\r\n})\r\n\r\nexport {\r\n  // Journal\r\n  fetchJournal,\r\n  saveJournal,\r\n  addNewJournal,\r\n  saveNewJournal,\r\n  // Ledger\r\n  fetchLedger,\r\n  saveLedger,\r\n  // Chart of accounts\r\n  fetchCatagory,\r\n  saveCatagory,\r\n  fetchAccount,\r\n  saveAccount,\r\n  addAccount,\r\n  sumbitChange,\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport fmt from 'indian-number-format'\r\n\r\nimport { fetchAccount, addAccount } from '../../store/actions'\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchAccount()\r\n  }\r\n  state = {\r\n    name: '',\r\n    code: '',\r\n    type: '',\r\n  }\r\n  HandleChange = e => {\r\n    const state = { ...this.state }\r\n    state[e.target.name] = e.target.value\r\n    this.setState(state)\r\n  }\r\n  HandleClear = () => {\r\n    const state = {\r\n      name: '',\r\n      code: '',\r\n      type: '',\r\n    }\r\n\r\n    this.setState(state)\r\n  }\r\n  HandlerAddAccount = e => {\r\n    e.preventDefault()\r\n\r\n    this.props.addAccount({\r\n      name: this.state.name,\r\n      code: this.state.code,\r\n      type: this.state.type,\r\n    })\r\n\r\n    this.HandleClear()\r\n    this.typeSelect.focus()\r\n  }\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <section className='container-scrollable'>\r\n          <div className='container-card'>\r\n            {this.props.catagory.map((catagory, index) => (\r\n              <Fragment>\r\n                <h1>{catagory.title}</h1>\r\n                <table\r\n                  className='uk-table uk-table-divider uk-table-striped uk-table-hover uk-table-small uk-table-justify  uk-table-middle'\r\n                  style={{ width: '100%' }}\r\n                >\r\n                  <thead>\r\n                    <tr>\r\n                      <th> Code </th>\r\n                      <th> Name </th>\r\n                      <th> Balance </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {catagory.account_order.map(account_id =>\r\n                      this.props.account\r\n                        .filter(\r\n                          e => e.type === catagory.id && e.id === account_id\r\n                        )\r\n                        .map(({ name, code, balance, preset }) => (\r\n                          <Fragment>\r\n                            <tr>\r\n                              <td>{code}</td>\r\n                              <td>{name}</td>\r\n                              <td>{balance}</td>\r\n                            </tr>\r\n                            {preset.map(({ preset_id }) =>\r\n                              this.props.account\r\n                                .filter(\r\n                                  e =>\r\n                                    e.type === catagory.id && e.id === preset_id\r\n                                )\r\n                                .map(({ name, code, balance }) => (\r\n                                  <tr style={{ border: '0.2rem solid red' }}>\r\n                                    <td>{code}</td>\r\n                                    <td>{name}</td>\r\n                                    <td>{balance}</td>\r\n                                  </tr>\r\n                                ))\r\n                            )}\r\n                          </Fragment>\r\n                        ))\r\n                    )\r\n\r\n                    // .map(({ name, code, balance }, i) => (\r\n                    //   <tr key={i}>\r\n                    //     <td>{code}</td>\r\n                    //     <td>{name}</td>\r\n                    //     <td>\r\n                    //       <span style={{ fontSize: '2rem' }}>৳</span>{' '}\r\n                    //       {fmt.format(balance, 2)}\r\n                    //     </td>\r\n                    //   </tr>\r\n                    // ))}\r\n                    /* {this.props.account.filter.map(({ name, code, balance }, i) => (\r\n                      <tr key={i}>\r\n                        <td>{code}</td>\r\n                        <td>{name}</td>\r\n                        <td>\r\n                          <span style={{ fontSize: '2rem' }}>৳</span>{' '}\r\n                          {fmt.format(balance, 2)}\r\n                        </td>\r\n                      </tr>\r\n                    ))} */\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              </Fragment>\r\n            ))}\r\n          </div>\r\n        </section>\r\n        <section\r\n          className='uk-container sidebar'\r\n          style={{ paddingTop: '3rem' }}\r\n        >\r\n          <h2> Add account </h2>\r\n          <hr />\r\n          {/* <form style={{ width: '100%' }} onSubmit={this.HandlerAddAccount}>\r\n            <label>\r\n              Account\r\n              <select\r\n                name='type'\r\n                ref={select => {\r\n                  this.typeSelect = select\r\n                }}\r\n                className='uk-select'\r\n                onChange={this.HandleChange}\r\n                value={this.state.catagory}\r\n              >\r\n                <option value=''>Choose a catagory</option>\r\n                <option value='asset'>Asset</option>\r\n                <option value='liability'>Liability</option>\r\n                <option value='equity'>Equity</option>\r\n              </select>\r\n            </label>\r\n            <br />\r\n            <br />\r\n            Code\r\n            <input\r\n              type='number'\r\n              name='code'\r\n              className='uk-input'\r\n              onChange={this.HandleChange}\r\n              value={this.state.code}\r\n            />\r\n            <br />\r\n            <br />\r\n            Name\r\n            <input\r\n              type='text'\r\n              className='uk-input'\r\n              name='name'\r\n              onChange={this.HandleChange}\r\n              value={this.state.name}\r\n            />\r\n            <br />\r\n            <br />\r\n            <input\r\n              className='uk-button uk-button-primary'\r\n              type='submit'\r\n              value='Add Account'\r\n            />\r\n          </form> */}\r\n        </section>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  catagory: state.catagory,\r\n  account: state.account,\r\n  journal: state.journal,\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchAccount: () => dispatch(fetchAccount()),\r\n  addAccount: payload => dispatch(addAccount(payload)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport dateFormat from 'dateformat'\r\nimport fmt from 'indian-number-format'\r\n\r\nimport { fetchLedger } from '../../store/actions'\r\n\r\nclass Ledger extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchLedger({\r\n      start_date: new Date(new Date() - 24 * 60 * 60 * 1000 * 7)\r\n        .toISOString()\r\n        .substr(0, 10),\r\n      end_date: new Date().toISOString().substr(0, 10),\r\n    })\r\n  }\r\n\r\n  state = {\r\n    start_date: new Date(new Date() - 24 * 60 * 60 * 1000 * 7)\r\n      .toISOString()\r\n      .substr(0, 10),\r\n    end_date: new Date().toISOString().substr(0, 10),\r\n  }\r\n  HandleDateChange = e => {\r\n    const state = { ...this.state }\r\n    state[e.target.name] = e.target.value\r\n\r\n    this.setState(state, this.onDateChange)\r\n  }\r\n  onDateChange = () => {\r\n    this.props.fetchLedger({\r\n      start_date: this.state.start_date,\r\n      end_date: this.state.end_date,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const [ledger] = [this.props.ledger]\r\n    return (\r\n      <Fragment>\r\n        <section className='container-scrollable'>\r\n          <div className='container-card'>\r\n            {this.props.account.length !== 0 && ledger.length !== 0 ? (\r\n              ledger.map(({ name, transaction }, i) => (\r\n                <Fragment key={i}>\r\n                  <h1>{name}</h1>\r\n                  <table\r\n                    className='uk-table uk-table-divider uk-table-striped uk-table-hover uk-table-small uk-table-justify  uk-table-middle'\r\n                    style={{ width: '100%' }}\r\n                  >\r\n                    <thead>\r\n                      <tr>\r\n                        <th rowSpan='2'>Date</th>\r\n                        <th rowSpan='2'>Particular</th>\r\n                        <th rowSpan='2'>Account</th>\r\n                        <th colSpan='2'>Amount</th>\r\n                      </tr>\r\n                      <tr>\r\n                        <th style={{ textAlign: 'right' }}>Debit</th>\r\n                        <th style={{ textAlign: 'right' }}>Credit</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {transaction.map(\r\n                        (\r\n                          { _id, date, particular, account, credit, debit },\r\n                          i\r\n                        ) => (\r\n                          <tr key={i}>\r\n                            <td>\r\n                              <span\r\n                                title={dateFormat(\r\n                                  date,\r\n                                  'ddd, dS mmm, yyyy, h:MM:ss TT'\r\n                                )}\r\n                              >\r\n                                {dateFormat(date, 'ddd, dS mmm, yyyy')}\r\n                              </span>\r\n                            </td>\r\n                            <td>{particular}</td>\r\n                            <td>\r\n                              {\r\n                                this.props.account.find(\r\n                                  e => +e.code === account\r\n                                ).name\r\n                              }\r\n                            </td>\r\n                            <td style={{ textAlign: 'right' }}>\r\n                              <span style={{ fontSize: '2rem' }}>৳</span>{' '}\r\n                              {fmt.format(debit, 2)}\r\n                            </td>\r\n                            <td style={{ textAlign: 'right' }}>\r\n                              <span style={{ fontSize: '2rem' }}>৳</span>{' '}\r\n                              {fmt.format(credit, 2)}\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      )}\r\n                      <tr>\r\n                        <td colSpan='2'>Total</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                  <br />\r\n                </Fragment>\r\n              ))\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  width: '100%',\r\n                  padding: '5rem',\r\n                }}\r\n              >\r\n                <h1 style={{ textAlign: 'center ' }}>Loading...</h1>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </section>\r\n        <section\r\n          className='uk-container sidebar'\r\n          style={{ paddingTop: '3rem' }}\r\n        >\r\n          <h2>Filter</h2>\r\n          <hr />\r\n          <label>\r\n            From\r\n            <input\r\n              type='date'\r\n              name='start_date'\r\n              className='uk-input'\r\n              onChange={this.HandleDateChange}\r\n              value={this.state.start_date}\r\n            />\r\n          </label>\r\n          <br />\r\n          <br />\r\n          <label>\r\n            To\r\n            <input\r\n              type='date'\r\n              name='end_date'\r\n              className='uk-input'\r\n              onChange={this.HandleDateChange}\r\n              value={this.state.end_date}\r\n            />\r\n          </label>\r\n        </section>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  ledger: state.ledger,\r\n  account: state.account,\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchLedger: payload => dispatch(fetchLedger(payload)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ledger)\r\n","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport dateFormat from 'dateformat'\r\nimport fmt from 'indian-number-format'\r\n\r\nimport { fetchJournal, fetchAccount, addNewJournal } from '../../store/actions'\r\n\r\nclass Journal extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchAccount()\r\n    this.props.fetchJournal()\r\n  }\r\n\r\n  state = {\r\n    sort: {\r\n      start_date: new Date(new Date() - 24 * 60 * 60 * 1000 * 7)\r\n        .toISOString()\r\n        .substr(0, 10),\r\n      end_date: new Date().toISOString().substr(0, 10),\r\n      search: '',\r\n      day: 'today',\r\n    },\r\n    credit: '',\r\n    debit: '',\r\n    particular: '',\r\n    amount: '',\r\n    comment: '',\r\n  }\r\n  HandleChange = (e, option) => {\r\n    const state = { ...this.state }\r\n    const name = e.target.name\r\n    const value = e.target.value\r\n\r\n    if (!option) state[name] = value\r\n    else {\r\n      state[option][name] = value\r\n    }\r\n\r\n    if (name === 'start_date' || name === 'end_date')\r\n      this.setState(state, this.onDateChange)\r\n    else if (name === 'day' && value !== 'n') {\r\n      switch (value) {\r\n        case '1': {\r\n          state.sort.start_date = new Date(new Date() - 24 * 60 * 60 * 1000 * 1)\r\n            .toISOString()\r\n            .substr(0, 10)\r\n          state.sort.end_date = new Date().toISOString().substr(0, 10)\r\n\r\n          this.setState(state, this.onDateChange)\r\n          break\r\n        }\r\n        case '2': {\r\n          state.sort.start_date = new Date(new Date() - 24 * 60 * 60 * 1000 * 2)\r\n            .toISOString()\r\n            .substr(0, 10)\r\n          state.sort.end_date = new Date().toISOString().substr(0, 10)\r\n\r\n          this.setState(state, this.onDateChange)\r\n          break\r\n        }\r\n        case '3':\r\n          state.sort.start_date = new Date(new Date() - 24 * 60 * 60 * 1000 * 2)\r\n            .toISOString()\r\n            .substr(0, 10)\r\n          state.sort.end_date = new Date().toISOString().substr(0, 10)\r\n\r\n          this.setState(state, this.onDateChange)\r\n          break\r\n        case '7':\r\n          state.sort.start_date = new Date(new Date() - 24 * 60 * 60 * 1000 * 7)\r\n            .toISOString()\r\n            .substr(0, 10)\r\n          state.sort.end_date = new Date().toISOString().substr(0, 10)\r\n\r\n          this.setState(state, this.onDateChange)\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    } else this.setState(state)\r\n  }\r\n  HandleClear = () => {\r\n    const state = {\r\n      date: new Date().getTime(),\r\n      debit: '',\r\n      credit: '',\r\n      particular: '',\r\n      amount: '',\r\n      comment: '',\r\n    }\r\n\r\n    this.setState(state)\r\n  }\r\n\r\n  HandlerAddJournal = e => {\r\n    e.preventDefault()\r\n\r\n    this.props.addNewJournal({\r\n      debit: this.state.debit,\r\n      credit: this.state.credit,\r\n      particular: this.state.particular,\r\n      amount: this.state.amount,\r\n      comment: this.state.comment,\r\n    })\r\n\r\n    this.HandleClear()\r\n    this.accountSelect.focus()\r\n  }\r\n  onDateChange = () => {\r\n    this.props.fetchJournal({\r\n      start_date: this.state.sort.start_date,\r\n      end_date: this.state.sort.end_date,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const [journal, account] = [this.props.journal, this.props.account]\r\n\r\n    return (\r\n      <Fragment>\r\n        <section className='container-scrollable'>\r\n          <div className='container-card'>\r\n            <h3>Journal</h3>\r\n            <span style={{ float: 'right' }} className='uk-form-group sort'>\r\n              {/* <input type='text' className='uk-input' placeholder='Search' /> */}\r\n              <select\r\n                name='day'\r\n                className='uk-select'\r\n                onChange={e => this.HandleChange(e, 'sort')}\r\n                value={this.state.sort.day}\r\n              >\r\n                <option value='1'>Today</option>\r\n                <option value='2'>Yesterday</option>\r\n                <option value='3'>Past 3 days</option>\r\n                <option value='7'>Weekly</option>\r\n                <option value='n'>Custom</option>\r\n              </select>\r\n              {this.state.sort.day === 'n' && (\r\n                <Fragment>\r\n                  <input\r\n                    type='date'\r\n                    name='start_date'\r\n                    className='uk-input'\r\n                    onChange={e => this.HandleChange(e, 'sort')}\r\n                    value={this.state.sort.start_date}\r\n                  />\r\n                  <input\r\n                    type='date'\r\n                    name='end_date'\r\n                    className='uk-input'\r\n                    onChange={e => this.HandleChange(e, 'sort')}\r\n                    value={this.state.sort.end_date}\r\n                  />\r\n                </Fragment>\r\n              )}\r\n            </span>\r\n            <br />\r\n            <br />\r\n            {account.length !== 0 && journal.length !== 0 ? (\r\n              <table\r\n                className='uk-table uk-table-divider uk-table-striped uk-table-hover uk-table-small uk-table-justify  uk-table-middle'\r\n                style={{ width: '100%' }}\r\n              >\r\n                <thead>\r\n                  <tr>\r\n                    <th>Date</th>\r\n                    <th>Particular</th>\r\n                    <th>Destination (Sources)</th>\r\n                    <th style={{ textAlign: 'right' }}>Amount</th>\r\n                    <th>Comments</th>\r\n                  </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                  {journal.map(\r\n                    (\r\n                      { date, particular, amount, credit, debit, comment },\r\n                      i\r\n                    ) => (\r\n                      <tr key={i}>\r\n                        <td>\r\n                          <span\r\n                            title={dateFormat(\r\n                              date,\r\n                              'ddd, dS mmm, yyyy, h:MM:ss TT'\r\n                            )}\r\n                          >\r\n                            {dateFormat(date, 'ddd, dS mmm, yyyy')}\r\n                          </span>\r\n                        </td>\r\n                        <td>{particular}</td>\r\n                        <td>\r\n                          {account.find(e => +e.code === debit).name}\r\n                          <br />\r\n                          &nbsp;&nbsp;&nbsp;&nbsp;&#x2B11;&nbsp;&nbsp;(\r\n                          {account.find(e => e.code === credit).name})\r\n                        </td>\r\n                        <td style={{ textAlign: 'right' }}>\r\n                          <span style={{ fontSize: '2rem' }}>৳</span>{' '}\r\n                          {fmt.format(amount, 2)}\r\n                        </td>\r\n                        <td>{comment}</td>\r\n                      </tr>\r\n                    )\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  width: '100%',\r\n                  padding: '5rem',\r\n                }}\r\n              >\r\n                <h1 style={{ textAlign: 'center ' }}>Loading...</h1>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </section>\r\n        <section\r\n          className='uk-container sidebar'\r\n          style={{ paddingTop: '3rem' }}\r\n        >\r\n          <h2> Transaction </h2>\r\n          <hr />\r\n          <div>\r\n            <form style={{ width: '100%' }} onSubmit={this.HandlerAddJournal}>\r\n              <section>\r\n                From\r\n                <select\r\n                  name='credit'\r\n                  ref={select => {\r\n                    this.accountSelect = select\r\n                  }}\r\n                  className='uk-select'\r\n                  onChange={this.HandleChange}\r\n                  value={this.state.credit}\r\n                >\r\n                  <option value=''>Choose a catagory</option>\r\n                  {account.map(({ name, code, type }, i) => (\r\n                    <option key={i} value={code}>\r\n                      {name} [{type}]\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </section>\r\n              <label>\r\n                To\r\n                <select\r\n                  name='debit'\r\n                  className='uk-select'\r\n                  onChange={this.HandleChange}\r\n                  value={this.state.debit}\r\n                >\r\n                  <option value=''>Choose a catagory</option>\r\n                  {account.map(({ code, name, type }, i) => (\r\n                    <option key={i} value={code}>\r\n                      {name} [{type}]\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </label>\r\n              <br />\r\n              <br />\r\n              Particular:{' '}\r\n              <input\r\n                type='text'\r\n                name='particular'\r\n                className='uk-input'\r\n                onChange={this.HandleChange}\r\n                value={this.state.particular}\r\n              />\r\n              <br />\r\n              <br />\r\n              Amount:{' '}\r\n              <input\r\n                type='number'\r\n                name='amount'\r\n                className='uk-input'\r\n                onChange={this.HandleChange}\r\n                value={this.state.amount}\r\n              />\r\n              <br />\r\n              <br />\r\n              Remarks:{' '}\r\n              <textarea\r\n                type='text'\r\n                name='comment'\r\n                className='uk-input'\r\n                onChange={this.HandleChange}\r\n                value={this.state.comment}\r\n              />\r\n              <br />\r\n              <br />\r\n              <input\r\n                className='uk-button uk-button-primary'\r\n                type='submit'\r\n                input='ADD'\r\n              />\r\n            </form>\r\n          </div>\r\n        </section>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  journal: state.journal,\r\n  account: state.account,\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchAccount: () => dispatch(fetchAccount()),\r\n  fetchJournal: payload => dispatch(fetchJournal(payload)),\r\n  addNewJournal: payload => dispatch(addNewJournal(payload)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Journal)\r\n","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nimport { fetchCatagory, sumbitChange } from '../../store/actions'\r\nclass Catalogue extends Component {\r\n  componentDidMount() {\r\n    this.updateTree()\r\n  }\r\n  componentDidUpdate() {\r\n    this.typeInput && this.typeInput.focus()\r\n  }\r\n  state = {\r\n    new_catagory: {\r\n      is_visible: false,\r\n      action: '',\r\n      id: '',\r\n      index: '',\r\n      title: '',\r\n    },\r\n    catagory_tree: [\r\n      {\r\n        id: 'assets',\r\n        title: 'Assets',\r\n\r\n        account_order: [],\r\n        account: {},\r\n        preset: {},\r\n      },\r\n      {\r\n        id: 'liabilities',\r\n        title: 'Liabilities',\r\n\r\n        account_order: [],\r\n        account: {},\r\n        preset: {},\r\n      },\r\n      {\r\n        id: 'equities',\r\n        title: 'Equities',\r\n\r\n        account_order: [],\r\n        account: {},\r\n        preset: {},\r\n      },\r\n      {\r\n        id: 'expenses',\r\n        title: 'Expenses',\r\n\r\n        account_order: [],\r\n        account: {},\r\n        preset: {},\r\n      },\r\n      {\r\n        id: 'incomes',\r\n        title: 'Incomes',\r\n\r\n        account_order: [],\r\n        account: {},\r\n        preset: {},\r\n      },\r\n    ],\r\n    change_tree: [],\r\n  }\r\n  updateTree = async () => {\r\n    const response = await fetch('http://192.168.0.100/api/catagory/')\r\n    const data = await response.json()\r\n    data[0] && this.setState({ catagory_tree: data[0].catagory })\r\n  }\r\n  onDragEnd = (result, index) => {\r\n    const { destination, source, draggableId } = result\r\n\r\n    if (!destination) return\r\n    if (\r\n      destination.draggableId === source.draggableId &&\r\n      destination.index === source.index\r\n    )\r\n      return\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const { preset_order: newPresetID } = this.state.catagory_tree[\r\n        index\r\n      ].account[source.droppableId]\r\n\r\n      newPresetID.splice(source.index, 1)\r\n      newPresetID.splice(destination.index, 0, draggableId)\r\n\r\n      const newCatagory = {\r\n        ...this.state.catagory_tree[index],\r\n        account: {\r\n          ...this.state.catagory_tree[index].account,\r\n          preset_order: newPresetID,\r\n        },\r\n      }\r\n      const newCatagoryList = [...this.state.catagory_tree]\r\n      newCatagoryList.splice(index, 1, newCatagory)\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        newCatagoryList,\r\n      })\r\n    } else {\r\n      const { preset_order: newSourcePresetID } = this.state.catagory_tree[\r\n        index\r\n      ].account[source.droppableId]\r\n      const { preset_order: newDestinationPresetID } = this.state.catagory_tree[\r\n        index\r\n      ].account[destination.droppableId]\r\n\r\n      newSourcePresetID.splice(source.index, 1)\r\n      newDestinationPresetID.splice(destination.index, 0, draggableId)\r\n\r\n      const newSourcePreset = {\r\n        ...this.state.catagory_tree[index].account,\r\n        preset_order: newSourcePresetID,\r\n      }\r\n      const newDestinationPreset = {\r\n        ...this.state.catagory_tree[index].account,\r\n        preset_order: newDestinationPresetID,\r\n      }\r\n\r\n      const newAccount = {\r\n        ...this.state.catagory_tree[index].account,\r\n        [newSourcePreset.id]: newSourcePreset,\r\n        [newDestinationPreset.id]: newDestinationPreset,\r\n      }\r\n      const newCatagory = {\r\n        ...this.state.catagory_tree[index],\r\n        account: newAccount,\r\n      }\r\n      const newCatagoryList = [...this.state.catagory_tree]\r\n      newCatagoryList.splice(index, 1, newCatagory)\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        newCatagoryList,\r\n      })\r\n    }\r\n  }\r\n  toggleInput = (action, index, id) => {\r\n    this.setState({\r\n      new_catagory: {\r\n        is_visible: true,\r\n        action: action,\r\n        id: id,\r\n        index: index,\r\n        title: '',\r\n      },\r\n    })\r\n  }\r\n  addCatatory = () => {\r\n    const [action, index, id] = [\r\n      this.state.new_catagory.action,\r\n      this.state.new_catagory.index,\r\n      this.state.new_catagory.id,\r\n    ]\r\n\r\n    if (action === 'account') {\r\n      const catagory = this.state.catagory_tree[index]\r\n\r\n      const newCatagory = {\r\n        ...catagory,\r\n        account: {\r\n          ...catagory.account,\r\n\r\n          [`ac_${\r\n            catagory.account ? Object.keys(catagory.account).length + 1 : '1'\r\n          }`]: {\r\n            id: `ac_${\r\n              catagory.account ? Object.keys(catagory.account).length + 1 : '1'\r\n            }`,\r\n            title: this.state.new_catagory.title,\r\n            preset_order: [],\r\n          },\r\n        },\r\n        account_order: [\r\n          ...catagory.account_order,\r\n          `ac_${\r\n            catagory.account ? Object.keys(catagory.account).length + 1 : '1'\r\n          }`,\r\n        ],\r\n      }\r\n\r\n      const catagoryList = this.state.catagory_tree\r\n      catagoryList.splice(index, 1, newCatagory)\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        catagory_tree: catagoryList,\r\n        change_tree: [\r\n          ...this.state.change_tree,\r\n          {\r\n            action: 'ADD',\r\n            type: 'account',\r\n            data: {\r\n              ...this.state.change_tree,\r\n              id: `ac_${\r\n                catagory.account\r\n                  ? Object.keys(catagory.account).length + 1\r\n                  : '1'\r\n              }`,\r\n              name: this.state.new_catagory.title,\r\n              catagory_id: catagory.id,\r\n              preset: [],\r\n            },\r\n          },\r\n        ],\r\n      })\r\n    } else {\r\n      const catagory = this.state.catagory_tree[index]\r\n\r\n      const newAccount = {\r\n        ...catagory.account,\r\n\r\n        [id]: {\r\n          ...catagory.account[id],\r\n          preset_order: [\r\n            `ps_${\r\n              catagory.preset ? Object.keys(catagory.preset).length + 1 : 1\r\n            }`,\r\n            ...catagory.account[id].preset_order,\r\n          ],\r\n        },\r\n      }\r\n      const newPreset = {\r\n        ...catagory.preset,\r\n\r\n        [`ps_${\r\n          catagory.preset ? Object.keys(catagory.preset).length + 1 : 1\r\n        }`]: {\r\n          id: `ps_${\r\n            catagory.preset ? Object.keys(catagory.preset).length + 1 : 1\r\n          }`,\r\n          title: this.state.new_catagory.title,\r\n        },\r\n      }\r\n      const newCatagory = {\r\n        ...catagory,\r\n        account: newAccount,\r\n        preset: newPreset,\r\n      }\r\n\r\n      const catagoryList = this.state.catagory_tree\r\n      catagoryList.splice(index, 1, newCatagory)\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        catagory_tree: catagoryList,\r\n        change_tree: [\r\n          ...this.state.change_tree,\r\n          {\r\n            action: 'ADD',\r\n            type: 'preset',\r\n            data: {\r\n              id: `ps_${\r\n                catagory.preset ? Object.keys(catagory.preset).length + 1 : 1\r\n              }1`,\r\n              name: this.state.new_catagory.title,\r\n              catagory_id: catagory.id,\r\n              account_id: id,\r\n            },\r\n          },\r\n        ],\r\n      })\r\n    }\r\n\r\n    this.HandleClear()\r\n  }\r\n  HandleInputChange = e => {\r\n    const state = { ...this.state }\r\n    state.new_catagory[e.target.name] = e.target.value\r\n    this.setState(state)\r\n  }\r\n  HandleClear = () => {\r\n    const state = {\r\n      new_catagory: {\r\n        is_visible: false,\r\n        action: '',\r\n        id: '',\r\n        index: '',\r\n        title: '',\r\n      },\r\n    }\r\n\r\n    this.setState(state)\r\n  }\r\n  Capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <section className='container-scrollable'>\r\n          <div className='container-card'>\r\n            {this.state.catagory_tree.length != 0 &&\r\n              this.state.catagory_tree.map((catagory, catagory_index) => (\r\n                <div key={catagory_index} className='draggable container'>\r\n                  <span className='section-title-big'>{catagory.title}</span>\r\n                  <button\r\n                    style={{ float: 'right' }}\r\n                    onClick={() => this.toggleInput('account', catagory_index)}\r\n                  >\r\n                    ADD\r\n                  </button>\r\n                  <DragDropContext\r\n                    onDragEnd={result => this.onDragEnd(result, catagory_index)}\r\n                  >\r\n                    {catagory.account_order.map((account_id, index) => {\r\n                      const account = catagory.account[account_id]\r\n\r\n                      return (\r\n                        <Droppable\r\n                          key={account.id}\r\n                          droppableId={account.id}\r\n                          index={index}\r\n                        >\r\n                          {provided => (\r\n                            <span>\r\n                              <div className='section-title'>\r\n                                {account.title} &nbsp;&nbsp;&nbsp;\r\n                                <button\r\n                                  style={{ float: 'right' }}\r\n                                  onClick={() =>\r\n                                    this.toggleInput(\r\n                                      'preset',\r\n                                      catagory_index,\r\n                                      account_id\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  ADD\r\n                                </button>\r\n                              </div>\r\n                              <div>\r\n                                <div\r\n                                  className='drag-container'\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.droppableProps}\r\n                                >\r\n                                  {account.preset_order.map(\r\n                                    (preset_order, index) => {\r\n                                      const preset =\r\n                                        catagory.preset[preset_order]\r\n\r\n                                      return (\r\n                                        <Draggable\r\n                                          key={preset.id}\r\n                                          draggableId={preset.id}\r\n                                          index={index}\r\n                                        >\r\n                                          {provided => (\r\n                                            <div\r\n                                              className='drag-item'\r\n                                              ref={provided.innerRef}\r\n                                              {...provided.draggableProps}\r\n                                              {...provided.dragHandleProps}\r\n                                            >\r\n                                              {preset.title}\r\n                                              <b style={{ float: 'right' }}>\r\n                                                ≡\r\n                                              </b>\r\n                                              {provided.placeholder}\r\n                                            </div>\r\n                                          )}\r\n                                        </Draggable>\r\n                                      )\r\n                                    }\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n\r\n                              {provided.placeholder}\r\n                            </span>\r\n                          )}\r\n                        </Droppable>\r\n                      )\r\n                    })}\r\n                  </DragDropContext>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </section>\r\n        <section\r\n          className='uk-container sidebar'\r\n          style={{ paddingTop: '3rem' }}\r\n        >\r\n          <h2> Add account </h2>\r\n          <hr />\r\n          {this.state.new_catagory.is_visible && (\r\n            <div>\r\n              <h4>Add {this.Capitalize(this.state.new_catagory.action)}</h4>\r\n              <input\r\n                ref={input => {\r\n                  this.typeInput = input\r\n                }}\r\n                type='text'\r\n                name='title'\r\n                onChange={this.HandleInputChange}\r\n                value={this.state.new_catagory.title}\r\n              />\r\n              <br />\r\n              <br />\r\n              <button onClick={this.addCatatory}>\r\n                Create {this.Capitalize(this.state.new_catagory.action)}\r\n              </button>\r\n            </div>\r\n          )}\r\n          <br />\r\n          <br />\r\n          <button\r\n            className='uk-button uk-button-primary'\r\n            onClick={() => {\r\n              this.props.sumbitChange({\r\n                catagory_tree: this.state.catagory_tree,\r\n                change_tree: this.state.change_tree,\r\n              })\r\n\r\n              // this.props.history.push('/account')\r\n            }}\r\n          >\r\n            &nbsp;&nbsp;SEND UPDATED CHANGE&nbsp;&nbsp;\r\n          </button>\r\n        </section>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  catagory: state.catagory,\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n  sumbitChange: payload => dispatch(sumbitChange(payload)),\r\n  fetchCatagory: payload => dispatch(fetchCatagory(payload)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Catalogue)\r\n","import React, { Component, Fragment } from 'react'\r\nimport { Switch, Route, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport LayoutSideBar from '../../component/sideBar/sideBar'\r\n\r\nimport Account from '../Account/Account'\r\nimport Ledger from '../Ledger/Ledger'\r\nimport Journal from '../Journal/Journal'\r\nimport Catalogue from '../Catalogue/Catalogue'\r\nimport { fetchJournal, fetchAccount, fetchLedger } from '../../store/actions'\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    if (this.props.match.path === '/') {\r\n      // this.props.fetchJournal()\r\n      this.props.fetchAccount()\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <main className='grid'>\r\n          <LayoutSideBar>\r\n            <ul className='uk-nav sidebar__nav'>\r\n              <li>\r\n                <NavLink to='/transaction' activeClassName='active'>\r\n                  Journal\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/ledger' activeClassName='active'>\r\n                  Ledgers\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/account' activeClassName='active'>\r\n                  Chart of Accounts\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to='/catalogue' activeClassName='active'>\r\n                  Catalogue\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </LayoutSideBar>\r\n          <section className='grid-2'>\r\n            <Switch>\r\n              <Route path='/transaction' component={Journal} />\r\n              <Route path='/account' component={Account} />\r\n              <Route path='/ledger' component={Ledger} />\r\n              <Route path='/catalogue' component={Catalogue} />\r\n              <Route exact path='/'>\r\n                <Fragment>\r\n                  <Account />\r\n                  <hr />\r\n                  <Journal />\r\n                  <hr />\r\n                  <hr />\r\n                </Fragment>\r\n              </Route>\r\n            </Switch>\r\n          </section>\r\n        </main>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchJournal: () => dispatch(fetchJournal()),\r\n  fetchAccount: () => dispatch(fetchAccount()),\r\n  fetchLedger: () => dispatch(fetchLedger()),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(App)\r\n","import React, { Component, Fragment } from 'react'\nimport { Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\n// import LayoutSideBar from '../component/sideBar/sideBar'\n\nimport Home from './Home/Home'\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <main className='main-container'>\n          <Route path='/' component={Home} />\n        </main>\n      </Fragment>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(null, mapDispatchToProps)(App)\n","const URL = `http://192.168.0.100/api/account/`\r\n\r\nconst fetchCatagory = async () => {\r\n  const response = await fetch('http://192.168.0.100/api/catagory/')\r\n  const data = await response.json()\r\n\r\n  if (response.status >= 400) {\r\n    throw new Error(data.errors)\r\n  }\r\n  return data\r\n}\r\n\r\nconst fetchAccount = async () => {\r\n  const response = await fetch(`${URL}`)\r\n  const data = await response.json()\r\n\r\n  if (response.status >= 400) {\r\n    throw new Error(data.errors)\r\n  }\r\n  return data\r\n}\r\nconst addAccount = async payload => {\r\n  const res = await fetch(`${URL}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(payload[0]),\r\n  })\r\n  const data = await res.json()\r\n  if (res.status >= 400) {\r\n    throw new Error(data.errors)\r\n  }\r\n  return data\r\n}\r\nconst changeAccount = async payload => {\r\n  const res = await fetch(`${URL}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(payload[0]),\r\n  })\r\n  const data = await res.json()\r\n  if (res.status >= 400) {\r\n    throw new Error(data.errors)\r\n  }\r\n  return data\r\n}\r\n\r\nexport default { fetchCatagory, fetchAccount, addAccount, changeAccount }\r\n","import { put, call, takeLatest } from 'redux-saga/effects'\r\n\r\nimport { ACCOUNT } from '../index'\r\nimport { saveAccount, fetchAccount, saveCatagory } from '../actions'\r\nimport Api from './api/account'\r\n\r\nfunction* handleAccountFetch() {\r\n  try {\r\n    const accountData = yield call(Api.fetchAccount)\r\n    const catagoryData = yield call(Api.fetchCatagory)\r\n\r\n    yield put(saveAccount(accountData))\r\n    yield put(saveCatagory(catagoryData[0].catagory))\r\n  } catch (e) {\r\n    yield put({ type: 'ACCOUNT.SAVE', message: e.message })\r\n  }\r\n}\r\n\r\nfunction* handleAddAccount(payload) {\r\n  try {\r\n    yield call(Api.addAccount, [payload.data])\r\n    yield put(fetchAccount())\r\n  } catch (e) {\r\n    yield put({ type: 'ACCOUNT.NEW_SAVE', message: e.message })\r\n  }\r\n}\r\nfunction* handleChangeAccount(payload) {\r\n  try {\r\n    yield call(Api.changeAccount, [payload.data])\r\n    yield put(fetchAccount())\r\n  } catch (e) {\r\n    yield put({ type: 'ACCOUNT.NEW_SAVE', message: e.message })\r\n  }\r\n}\r\n\r\nfunction* watchAccount() {\r\n  yield takeLatest(ACCOUNT.FETCH, handleAccountFetch)\r\n  yield takeLatest(ACCOUNT.CHANGE, handleChangeAccount)\r\n  yield takeLatest(ACCOUNT.ADD, handleAddAccount)\r\n}\r\n\r\nexport default watchAccount\r\n","const URL = `http://192.168.0.100/api/journal`\r\n\r\nconst fetchJournal = async payload => {\r\n  payload = payload[0]\r\n\r\n  const res = await fetch(\r\n    `${URL}?size=50${\r\n      payload && payload.start_date ? `&startDate=${payload.start_date}` : ''\r\n    }${payload && payload.end_date ? `&endDate=${payload.end_date}` : ''}`\r\n  )\r\n\r\n  const data = await res.json()\r\n  if (res.status >= 400) {\r\n    throw new Error(data.errors)\r\n  }\r\n  return data\r\n}\r\nconst createJournal = async payload => {\r\n  const res = await fetch(`${URL}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(payload[0]),\r\n  })\r\n  const data = await res.json()\r\n  if (res.status >= 400) {\r\n    throw new Error(data.errors)\r\n  }\r\n  return data\r\n}\r\n\r\nexport default { fetchJournal, createJournal }\r\n","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport { JOURNAL } from '../index'\r\nimport Api from './api/journal'\r\nimport { saveJournal, saveNewJournal } from '../actions'\r\n\r\nfunction* handleJournalFetch(payload) {\r\n  try {\r\n    const journal = yield call(Api.fetchJournal, [payload.data])\r\n    yield put(saveJournal(journal))\r\n  } catch (e) {\r\n    yield put({ type: 'JOURNAL.SAVE', message: e.message })\r\n  }\r\n}\r\nfunction* handleJournalAdd(payload) {\r\n  try {\r\n    const journal = yield call(Api.createJournal, [payload.data])\r\n    yield put(saveNewJournal(journal))\r\n  } catch (e) {\r\n    yield put({ type: 'JOURNAL.SAVE', message: e.message })\r\n  }\r\n}\r\n\r\nfunction* watchJournal() {\r\n  yield takeLatest(JOURNAL.FETCH, handleJournalFetch)\r\n  yield takeLatest(JOURNAL.NEW, handleJournalAdd)\r\n}\r\n\r\nexport default watchJournal\r\n","const URL = `http://192.168.0.100/api/ledger`\r\n\r\nconst fetchLedger = async payload => {\r\n  const startDate = payload[0].start_date\r\n  const endDate = payload[0].end_date\r\n\r\n  const res = await fetch(`${URL}?startDate=${startDate}&endDate=${endDate}`)\r\n  const data = await res.json()\r\n  if (res.status >= 400) {\r\n    throw new Error(data.errors)\r\n  }\r\n  return data\r\n}\r\n\r\nexport default { fetchLedger }\r\n","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport { LEDGER } from '../index'\r\nimport Api from './api/ledger'\r\nimport { saveLedger } from '../actions'\r\n\r\nfunction* handleLedgerFetch(payload) {\r\n  try {\r\n    const ledger = yield call(Api.fetchLedger, [payload.data])\r\n    yield put(saveLedger(ledger))\r\n  } catch (e) {\r\n    yield put({ type: 'LEDGER.SAVE', message: e.message })\r\n  }\r\n}\r\n\r\nfunction* watchLedger() {\r\n  yield takeLatest(LEDGER.FETCH, handleLedgerFetch)\r\n}\r\n\r\nexport default watchLedger\r\n","import { all } from 'redux-saga/effects'\r\n\r\nimport accountSaga from './accountSaga'\r\nimport journalSaga from './journalSaga'\r\nimport ledgerSaga from './ledgerSaga'\r\n\r\nexport default function* rootSaga() {\r\n  yield all([accountSaga(), journalSaga(), ledgerSaga()])\r\n}\r\n","import { ACCOUNT } from '..'\r\n\r\nconst initialState = []\r\n\r\nconst account = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACCOUNT.SAVE:\r\n      return action.data\r\n    case ACCOUNT.NEW_SAVE:\r\n      const newState = [...state]\r\n      newState.find(e => e.code === action.data.destination).debit += +action\r\n        .data.amount\r\n      newState.find(e => e.code === action.data.destination).balance -= +action\r\n        .data.amount\r\n      newState.find(e => e.code === action.data.source).credit += +action.data\r\n        .amount\r\n      newState.find(e => e.code === action.data.source).balance -= +action.data\r\n        .amount\r\n\r\n      return newState\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default account\r\n","import { JOURNAL } from '..'\r\n\r\nconst initialState = []\r\n\r\nconst journal = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case JOURNAL.SAVE:\r\n      return action.data\r\n    case JOURNAL.NEW_SAVE: {\r\n      const {\r\n        id,\r\n        date,\r\n        credit,\r\n        debit,\r\n        particular,\r\n        amount,\r\n        comment,\r\n      } = action.data\r\n      return [\r\n        {\r\n          id,\r\n          date,\r\n          credit,\r\n          debit,\r\n          particular,\r\n          amount,\r\n          comment,\r\n        },\r\n        ...state,\r\n      ]\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default journal\r\n","import { LEDGER } from '..'\r\n\r\nconst initialState = []\r\n\r\nconst ledger = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LEDGER.SAVE:\r\n      return action.data\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default ledger\r\n","import { CATAGORY } from '..'\r\n\r\nconst initialState = []\r\n\r\nconst catagory = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CATAGORY.SAVE:\r\n      return action.data\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default catagory\r\n","import { combineReducers } from 'redux'\r\n\r\nimport account from './account'\r\nimport journal from './journal'\r\nimport ledger from './ledger'\r\nimport catagory from './catagory'\r\n\r\nconst rootReducer = combineReducers({\r\n  account: account,\r\n  journal: journal,\r\n  ledger: ledger,\r\n  catagory: catagory,\r\n})\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport rootSaga from './sagas'\r\nimport rootReducer from './reducers'\r\n\r\nconst monitor = window['__SAGA_MONITOR_EXTENSION__']\r\n\r\nconst configureStore = () => {\r\n\tconst sagaMiddleware = createSagaMiddleware({ sagaMonitor: monitor })\r\n\tconst store = createStore(\r\n\t\trootReducer,\r\n\r\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ ? compose(\r\n\t\t\t\tapplyMiddleware(sagaMiddleware),\r\n\t\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__()\r\n\t\t\t) :\r\n\t\t\tapplyMiddleware(sagaMiddleware)\r\n\t)\r\n\tsagaMiddleware.run(rootSaga)\r\n\treturn store\r\n}\r\n\r\nexport default configureStore\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './container/App'\nimport configureStore from './store/config'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport './style/index.scss'\n\nimport { BrowserRouter } from 'react-router-dom'\n\nconst store = configureStore()\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</Provider>,\n\tdocument.getElementById('root')\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}